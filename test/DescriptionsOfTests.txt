
 -- Test descriptions for GwLogger Version 1.3.x --
 
 Unit and Functional tests are not included with the npm package, since they
 are never required by normal user-developers, but for use in GwLogger development
 or testing can be retrieved as the test directory within the github repository. 
 The entire directory should be installed under the gwlogger directory after 
 npm installation.

 The Node.js "assert" package is used, and so no dependencies are necessary to test. 
 Zero dependencies was a goal of gwlogger, but has led to some platform-specific tests. 

 For Windows, so there are simple bat files that run the tests with help from envSet.bat 
 and envUnset.bat. However, it is not that hard to run each individual test separately, 
 which may be better if any problems are suspected/detected.
 
 Testing on Ubuntu requires running each test separately. For UnitTestsGwLogger_03.js,
 you'll need to first run setEnv.sh to set the environment variables. Use a fresh 
 terminal window to run other tests afterwards. 
 
 All testing is from the command line and should be done after changing to the 
 gwlogger/test directory. Be sure that these directories exist before testing begins:
   1. gwloggr/test/logfiles
   2. gwlogger/test/rolledfiles
   3. gwlogger/test/rolledfiles/rolledfiles2

 Unit tests 1,2,4, and 5 can be executed independently, however UnitTestsGwLogger_03 requires
 prep work to set up the environment variables (see files envSet.bat and 
 envUnset.bat or envSet.sh on Linux systems), and UnitTestsGwLogger_02 should 
 run sometime before UnitTestsGwLogger_04 to ensure a certain logfile exists 
 for UnitTestsGwLogger_04 to test roll at startup. If you are testing on older 
 versions of Node (< v12), you may need to use the "node --experimental-modules" switch 
 for UnitTestsGwLogger_05 to get support for the ECMAScript Modules 
 import command.
 
 The Unit Tests can be executed with UTRunner.bat if on Windows and inside the gwlogger/test directory.
 Progress and results can be found in ./logfiles/Unit Test Results.log. Each Unit Test provides a 
 summary of number of tests attempted and number passed after its execution. 
 
 1. UnitTestsGwLogger_01.js, covers these core test cases (sets, then checks that getters will match):
		test_getVersion();
		test_setIsEpoch();
		test_setIsShowMs();
		test_setIsLocalTimezone();
		test_setYearDigits();
		test_setIsConsoleTs();	
		test_setSepChar();
		test_setLogLevel();
		test_setIsConsole();
		test_setIsColor();
		test_setIsFile();
		test_getFn();
	gwlogger\test>node UnitTestsGwLogger_01.js	
		
 
 2. UnitTestsGwLogger_02.js, covers these test cases:
		test_getVersion();
		test_creationStories();
		test_getJsonProfile();
		test_createActiveProfile();
		test_Str2NumLogLevel();
		test_getTimeStamp();
		test_profileFileNameErrors();
		test_customFileNameErrors(); 
		test_customStreamPools();
	gwlogger\test>node UnitTestsGwLogger_02.js	
		
 3. UnitTestsGwLogger_03.js,  test for environment variables use in profiles.
		Requires some preparation: run 'envSet.bat' before the test file, and 'envUnset.bat' afterwards.
		test_getEnvProfile(); // compares profile built with envSet.bat with canned test model.
		gwlogger\test>envSet   or for Linux, gwlogger/test$ source ./envSet.sh
		gwlogger\test>node UnitTestsGwLogger_03.js	
	gwlogger\test>envUnset     sorry, only Windows so far.
		
 4. UnitTestsGwLogger_04.js, test rolling logfiles at startup and by size.
		test_getVersion();
		test_maxLogSize();
		test_maxNumRollingLogs();
		test_rollPath();
		test_isRollBySize();
		test_ArchiveLogpath();
		test_isRollAsArchive();
		test_RollingLogsViaProfile();
		primeBlitz();
		test_recovery(0, false);
 	gwlogger\test>node UnitTestsGwLogger_04.js	

 5.	UnitTestsGwLogger_05.mjs  -- A unit test to ensure export compatibility for ES6 import syntax, 
	Ensures that the export statements of GwLogger are compatible with import. Success is a good version test.
		test_getVersion(); // if this works okay, then GwLogger worked okay with ES6 modules
	gwlogger\test>node UnitTestsGwLogger_05.mjs	
		or node --experimental-modules UnitTestsGwLogger_05.mjs

 >> Functional tests log to console and/or file, and must be verified correct manually.
 
 Functional tests can be executed independently, or with FTRunner.bat. All functional tests require
 manual inspection of output, both on the console and in the logfiles. Each test provides some additional
 detail.
	
 6. FuncTestCon_01.js, covers console-only on/off logging manipulation:		
		1. Logs all levels to console
		2. Logs No levels to console with LL=OFF
		3. Logs NO levels to console with LL=ALL, isConsole=false
		4. Logs all levels to console with isConsole=true (LL=ALL)
		5. Ensure that no logging from FuncTestCon_01 creates or adds to any logfile.
	gwlogger\test>node FuncTestCon_01.js	

 7. FuncTest_02.js, logs identically to console and file (including timestamps). Tests are:
		1. Only fatal message will log.
		2. Fatal and error messages log.
		3. Add warn message.
		4. Add notice message
		5-9. Add info, dev, debug, trace, and all 
	gwlogger\test>node FuncTest_02.js	
	
 8. FuncTest_03.js, covers timestamp customizations, setModuleName, and separation characters.
	Logged lines in output are numbered for reference in problems.
		1. Message only needs to appear
		2. Version number of GwLogger, needs only to appear.
		3. Added ModuleName (a user-set string).
		4. On console, separation character is shown as a '&'.
		5. Removed separation character.
		6. Removed Module name.
		7. Added timestamp to console logging.
		8. Switched TS format to milliseconds/Unix Epoch.
		9. Separation character now a '#'.
		10. Separation character back to a space.
		11. Timestamp is local without any year digits.
		12. TS has a 4-digit year.
		13. TS has a 2-digit year.
		14. TS is UTC (ends in 'z'), but no year.
		15. Local time, no year, no milliseconds.
		16. In logfile, separation character is now '#', and the module name is back.
		17. returned to a space for separation character in logfile, and removed module name.
		18. Simply must log at TRACE loglevel.
		19-22. Console messages should all be monochrome via setIsColor(false)
		23-26. Console messages should be color (default, and setIsColor(true))
		27. ModuleName should be the name of the test file, "functest_03".
	gwlogger\test>node FuncTest_03.js	
		
 9.	FuncTest_04.js, helps test formatted output, 
	such as log.info("the meaning of life is: ", {meaningOfLife: {love: true, health: 8, money: 5} } );		
		gwlogger\test>node FuncTest_04.js	

	
 10.EnduroGwLogger.js, Not a unit or functional test, more of a stress test. 
	Intended to run for long periods to look for memory leaks or problems 
	logging to slower drives, or to LAN drives. Uses back-pressure indicator 
	to keep logging near maximum rate for long periods with rolling logfiles. 
	As of v1.2.3 checks	for sequencing issues in log statements. As of 1.4.0
	adds archiving the rolled log files. 
	Currently uses 500,000 iterations for a complete run, which may take a 
	few hours to overnight depending on the speed of the test machine and 
	its logging drive(s). To run a shorter version, change the variable 
	'nIterations' which is set with one of the last statements near the 
	bottom of the file.
		gwlogger\test>node EnduroGwLogger.js
	

	
	
	
	
	
	
 
 
 